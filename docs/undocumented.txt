Stack.swift
	public struct Stack<Element: Equatable>
	public var top: Element? { return items.last }
	public init() { }
	public init(_ items: [Element])
	public init(_ items: Element...)
	public mutating func push(item: Element)
	public mutating func pop() -> Element?
	public mutating func pop(amount amount: Int) throws -> Stack<Element>
	public func == <T>(lhs: Stack<T>, rhs: Stack<T>) -> Bool
Error.swift
	public enum ArrayError: ErrorType
	case RemovalError
ListProcessing.swift
	public func + <T: Any>(head: T, tail: [T]) -> [T]
	public func + <T: Any>(list: [T], item: T) -> [T]
