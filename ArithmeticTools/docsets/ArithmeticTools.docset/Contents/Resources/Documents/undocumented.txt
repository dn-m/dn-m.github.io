ArithmeticType.swift
	public protocol ArithmeticType: Comparable, IntegerLiteralConvertible
	public static var zero: Int { return 0 }
	public static var one: Int { return 1 }
	public static func mod(dividend: Int, _ modulus: Int) -> Int
	public static func random(min min: Int = 0, var max: Int = Int.max) -> Int
	public var isPrime: Bool
	public var isEven: Bool { return self % 2 == 0 }
	public var isOdd: Bool { return self % 2 != 0 }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int8 { return 0 }
	public static var one: Int8 { return 1 }
	public static func mod(dividend: Int8, _ modulus: Int8) -> Int8
	public static func random(min min: Int8 = Int8.min, max: Int8 = Int8.max) -> Int8
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt8 { return 0 }
	public static var one: UInt8 { return 1 }
	public static func mod(dividend: UInt8, _ modulus: UInt8) -> UInt8
	public static func random(min min: UInt8 = UInt8.min, max: UInt8 = UInt8.max) -> UInt8
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int16 { return 0 }
	public static var one: Int16 { return 1 }
	public static func mod(dividend: Int16, _ modulus: Int16) -> Int16
	public static func random(min min: Int16 = Int16.min, max: Int16 = Int16.max) -> Int16
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt16 { return 0 }
	public static var one: UInt16 { return 1 }
	public static func mod(dividend: UInt16, _ modulus: UInt16) -> UInt16
	public static func random(min min: UInt16 = UInt16.min, max: UInt16 = UInt16.max) -> UInt16
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int32 { return 0 }
	public static var one: Int32 { return 1 }
	public static func mod(dividend: Int32, _ modulus: Int32) -> Int32
	public static func random(min min: Int32 = Int32.min, max: Int32 = Int32.max) -> Int32
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt32 { return 0 }
	public static var one: UInt32 { return 1 }
	public static func mod(dividend: UInt32, _ modulus: UInt32) -> UInt32
	public static func random(min min: UInt32 = UInt32.min, max: UInt32 = UInt32.max) -> UInt32
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int64 { return 0 }
	public static var one: Int64 { return 1 }
	public static func mod(dividend: Int64, _ modulus: Int64) -> Int64
	public static func random(min min: Int64 = Int64.min, max: Int64 = Int64.max) -> Int64
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt64 { return 0 }
	public static var one: UInt64 { return 1 }
	public static func mod(dividend: UInt64, _ modulus: UInt64) -> UInt64
	public static func random(min min: UInt64 = UInt64.min, max: UInt64 = UInt64.max) -> UInt64
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public func format(f: String) -> String { return String(format(f), self) }
Array+ArithmeticType.swift
	public var mean: Float?
	public var cumulative: [Element]
SequenceType+ArithmeticType.swift
	public var sum: Generator.Element { return reduce(0) { $0 + $1 } }
	public var gcd: Generator.Element?
Functions.swift
	public func greatestCommonDivisor<T: ArithmeticType>(a: T, _ b: T) -> T
