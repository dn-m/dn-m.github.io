ArithmeticType.swift
	static var zero: Self { get }
	static var one: Self { get }
	static var two: Self { get }
	func isDivisible(by value: Self) -> Bool
	func format(f: String) -> String
	public static var zero: Int { return 0 }
	public static var one: Int { return 1 }
	public static var two: Int { return 2 }
	public static func mod(dividend: Int, _ modulus: Int) -> Int
	public static func random(min min: Int = 0, max: Int = Int.max) -> Int
	public static func abs(value: Int) -> Int
	public var isInteger: Bool { return true }
	public var isPrime: Bool
	public var isEven: Bool { return self % 2 == 0 }
	public var isOdd: Bool { return self % 2 != 0 }
	public var isPowerOfTwo: Bool { return self != 0 && (self & (self - 1) == 0) }
	public func isDivisible(by value: Int) -> Bool { return self % value == 0 }
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int8 { return 0 }
	public static var one: Int8 { return 1 }
	public static var two: Int8 { return 2 }
	public static func mod(dividend: Int8, _ modulus: Int8) -> Int8
	public static func random(min min: Int8 = Int8.min, max: Int8 = Int8.max) -> Int8
	public static func abs(value: Int8) -> Int8
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: Int8) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt8 { return 0 }
	public static var one: UInt8 { return 1 }
	public static var two: UInt8 { return 2 }
	public static func mod(dividend: UInt8, _ modulus: UInt8) -> UInt8
	public static func random(min min: UInt8 = UInt8.min, max: UInt8 = UInt8.max) -> UInt8
	public static func abs(value: UInt8) -> UInt8
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: UInt8) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int16 { return 0 }
	public static var one: Int16 { return 1 }
	public static var two: Int16 { return 2 }
	public static func mod(dividend: Int16, _ modulus: Int16) -> Int16
	public static func random(min min: Int16 = Int16.min, max: Int16 = Int16.max) -> Int16
	public static func abs(value: Int16) -> Int16
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: Int16) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt16 { return 0 }
	public static var one: UInt16 { return 1 }
	public static var two: UInt16 { return 2 }
	public static func mod(dividend: UInt16, _ modulus: UInt16) -> UInt16
	public static func random(min min: UInt16 = UInt16.min, max: UInt16 = UInt16.max) -> UInt16
	public static func abs(value: UInt16) -> UInt16
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: UInt16) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int32 { return 0 }
	public static var one: Int32 { return 1 }
	public static var two: Int32 { return 2 }
	public static func mod(dividend: Int32, _ modulus: Int32) -> Int32
	public static func random(min min: Int32 = Int32.min, max: Int32 = Int32.max) -> Int32
	public static func abs(value: Int32) -> Int32
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: Int32) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt32 { return 0 }
	public static var one: UInt32 { return 1 }
	public static var two: UInt32 { return 2 }
	public static func mod(dividend: UInt32, _ modulus: UInt32) -> UInt32
	public static func random(min min: UInt32 = UInt32.min, max: UInt32 = UInt32.max) -> UInt32
	public static func abs(value: UInt32) -> UInt32
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: UInt32) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Int64 { return 0 }
	public static var one: Int64 { return 1 }
	public static var two: Int64 { return 2 }
	public static func mod(dividend: Int64, _ modulus: Int64) -> Int64
	public static func random(min min: Int64 = Int64.min, max: Int64 = Int64.max) -> Int64
	public static func abs(value: Int64) -> Int64
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: Int64) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: UInt64 { return 0 }
	public static var one: UInt64 { return 1 }
	public static var two: UInt64 { return 2 }
	public static func mod(dividend: UInt64, _ modulus: UInt64) -> UInt64
	public static func random(min min: UInt64 = UInt64.min, max: UInt64 = UInt64.max) -> UInt64
	public static func abs(value: UInt64) -> UInt64
	public var isInteger: Bool { return true }
	public var isPrime: Bool { return Int(self).isPrime }
	public var isEven: Bool { return Int(self).isEven }
	public var isOdd: Bool { return Int(self).isOdd }
	public var isPowerOfTwo: Bool { return Int(self).isPowerOfTwo }
	public func isDivisible(by value: UInt64) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Float { return 0 }
	public static var one: Float { return 1 }
	public static var two: Float { return 2 }
	public static var max: Float { return FLT_MAX }
	public static var min: Float { return FLT_MIN }
	public static func mod(dividend: Float, _ modulus: Float) -> Float
	public static func abs(value: Float) -> Float
	public static func random(min min: Float = 0.0, max: Float = 1.0) -> Float
	public var isInteger: Bool { return self % 1 == 0 }
	public var isPrime: Bool { return isInteger ? Int(self).isPrime : false }
	public var isEven: Bool { return isInteger ? Int(self).isEven : false }
	public var isOdd: Bool { return isInteger ? Int(self).isOdd : false }
	public var isPowerOfTwo: Bool { return isInteger ? Int(self).isPowerOfTwo : false }
	public func isDivisible(by value: Float) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
	public static var zero: Double { return 0 }
	public static var one: Double { return 1 }
	public static var two: Double { return 2 }
	public static var max: Double { return DBL_MAX }
	public static var min: Double { return DBL_MIN }
	public static func mod(dividend: Double, _ modulus: Double) -> Double
	public static func random(min min: Double = Double.min, max: Double = Double.max) -> Double
	public static func abs(value: Double) -> Double
	public var isInteger: Bool { return self % 1 == 0 }
	public var isPrime: Bool { return isInteger ? Int(self).isPrime : false }
	public var isEven: Bool { return isInteger ? Int(self).isEven : false }
	public var isOdd: Bool { return isInteger ? Int(self).isOdd : false }
	public var isPowerOfTwo: Bool { return isInteger ? Int(self).isPowerOfTwo : false }
	public func isDivisible(by value: Double) -> Bool
	public func format(f: String) -> String { return String(format(f), self) }
